% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bayesprot.R
\name{bayesprot}
\alias{bayesprot}
\title{Fit the BayesProt Bayesian Protein-level quantification model}
\usage{
bayesprot(data, output = "bayesprot", assay.refs = levels(data$Assay),
  assay.samples = levels(data$Assay), peptide.model = "independent",
  peptide.prior = "empirical", feature.model = "independent",
  feature.prior = "empirical", error.model = "poisson",
  missingness.model = "censored", missingness.threshold = 0,
  normalisation.model = "cov.rob",
  normalisation.proteins = levels(data$Protein),
  de.sample.conditions = NULL, plots = F, model0.npeptide = 3,
  model0.seed = 0, model0.nchain = 1, model0.nwarmup = 256,
  model0.thin = 1, model0.nsample = 1024, model.seed = 0,
  model.nchain = 1, model.nwarmup = 256, model.thin = 1,
  model.nsample = 1024, nthread = parallel::detectCores(),
  hpc = NULL)
}
\arguments{
\item{data}{Dataset returned by a `bayesprot::import...()` function}

\item{output}{Directory to store all intermediate and output data}

\item{assay.refs}{Reference assays - default is all assays, but this is only valid if the study is label-free or blocked across runs appropriately}

\item{assay.samples}{Mapping between assays and samples; default is a one-to-one mapping.}

\item{peptide.model}{Either NULL (no peptide model), `single` (single random effect) or `independent` (per-peptide independent random effects; default)}

\item{peptide.prior}{Either NULL (uninformative) or `empirical` (empirical Bayes; default).}

\item{feature.model}{Either `single` (single residual) or `independent` (per-feature independent residuals; default)}

\item{feature.prior}{Either NULL (uninformative) or `empirical` (empirical Bayes; default)}

\item{error.model}{Either `lognormal` or `poisson` (default)}

\item{missingness.model}{Either `zero` (NAs set to 0), `feature` (NAs set to lowest quant of that feature) or `censored` (NAs modelled as censored between 0 and lowest quant of that feature; default)}

\item{missingness.threshold}{All feature quants below this are treated as missing}

\item{normalisation.model}{Use either NULL (no normalisation), `median` (median) or `cov.rob` (robust covariance estimation)}

\item{normalisation.proteins}{Proteins to use in the normalisation; default is all proteins}

\item{de.sample.conditions}{Differential Expression Analysis (optional): Mapping between samples and conditions}

\item{plots}{Generate all plots (todo)}

\item{model0.npeptide}{Empirical Bayes model: Proteins with less than this number of peptides are not considered}

\item{model0.seed}{Empirical Bayes model: Random numnber seed}

\item{model0.nchain}{Empirical Bayes model: Number of MCMC chains to run}

\item{model0.nwarmup}{Empirical Bayes model: Number of MCMC warmup iterations to run for each chain}

\item{model0.thin}{Empirical Bayes model: MCMC thinning factor}

\item{model0.nsample}{Empirical Bayes model: Total number of MCMC samples to generate}

\item{model.seed}{Full BayesProt model: Random numnber seed}

\item{model.nchain}{Full BayesProt model: Number of MCMC chains to run}

\item{model.nwarmup}{Full BayesProt model: Number of MCMC warmup iterations to run for each chain}

\item{model.thin}{Full BayesProt model: MCMC thinning factor}

\item{model.nsample}{Full BayesProt model: Total number of MCMC samples to generate}

\item{nthread}{Number of CPU threads to employ}

\item{hpc}{Either NULL (execute locally), `pbs`, `sge` or `slurm` (submit to HPC cluster)}
}
\value{
A BayesProt fit object that can be interrogated for various results (todo)
}
\description{
Fit the BayesProt Bayesian Protein-level quantification model
}
